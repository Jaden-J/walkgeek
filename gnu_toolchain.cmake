CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)

# GCC toolchain prefix
IF(NOT TOOLCHAIN_PREFIX)
     SET(TOOLCHAIN_PREFIX "$ENV{HOME}/Local/CodeSourcery/Sourcery_CodeBench_Lite_for_ARM_EABI")
     MESSAGE(STATUS "No TOOLCHAIN_PREFIX specified, using default: " ${TOOLCHAIN_PREFIX})
ENDIF()

IF(NOT TARGET_TRIPLET)
    SET(TARGET_TRIPLET "arm-none-eabi")
    MESSAGE(STATUS "No TARGET_TRIPLET specified, using default: " ${TARGET_TRIPLET})
ENDIF()

IF(NOT CMAKE_BUILD_TYPE)
    SET(CMAKE_BUILD_TYPE "Debug")
    MESSAGE(STATUS "No CMAKE_BUILD_TYPE specified, using default Debug")
ENDIF()

SET(TOOLCHAIN_CMAKE ${CMAKE_CURRENT_LIST_FILE})

IF(NOT OPTIMIZATION_LEVEL)
    SET(OPTIMIZATION_LEVEL_DEBUG 0)
    SET(OPTIMIZATION_LEVEL_RELEASE s)
ELSEIF()
    SET(OPTIMIZATION_LEVEL_DEBUG ${OPTIMIZATION_LEVEL})
    SET(OPTIMIZATION_LEVEL_RELEASE ${OPTIMIZATION_LEVEL})
ENDIF()

SET(TOOLCHAIN_BIN_DIR ${TOOLCHAIN_PREFIX}/bin)
SET(TOOLCHAIN_INC_DIR ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/include)
SET(TOOLCHAIN_LIB_DIR ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET}/lib)

SET(CMAKE_SYSTEM_NAME Generic CACHE INTERNAL "system name")
SET(CMAKE_SYSTEM_PROCESSOR arm CACHE INTERNAL "processor")

SET(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-gcc CACHE INTERNAL "c compiler")
SET(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-g++ CACHE INTERNAL "cxx compiler")
SET(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-as CACHE INTERNAL "asm compiler")

SET(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objcopy CACHE INTERNAL "objcopy")
SET(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/${TARGET_TRIPLET}-objdump CACHE INTERNAL "objdump")

SET(CMAKE_C_FLAGS_DEBUG "-O${OPTIMIZATION_LEVEL_DEBUG} -ggdb" CACHE INTERNAL "c debug compiler flags")
SET(CMAKE_CXX_FLAGS_DEBUG "-O${OPTIMIZATION_LEVEL_DEBUG} -ggdb" CACHE INTERNAL "cxx debug compiler flags")
SET(CMAKE_ASM_FLAGS_DEBUG " -ggdb" CACHE INTERNAL "asm debug compiler flags")

SET(CMAKE_C_FLAGS_RELEASE "-O${OPTIMIZATION_LEVEL_RELEASE}" CACHE INTERNAL "c release compiler flags")
SET(CMAKE_CXX_FLAGS_RELEASE "-O${OPTIMIZATION_LEVEL_RELEASE}" CACHE INTERNAL "cxx release compiler flags")
SET(CMAKE_ASM_FLAGS_RELEASE "" CACHE INTERNAL "asm release compiler flags")

SET(CMAKE_MODULE_LINKER_FLAGS "-L${TOOLCHAIN_LIB_DIR}" CACHE INTERNAL "module link flags")
SET(CMAKE_SHARED_LINKER_FLAGS "-L${TOOLCHAIN_LIB_DIR}" CACHE INTERNAL "shared link flags")

SET(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PREFIX}/${TARGET_TRIPLET} CACHE INTERNAL "cross root directory")
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH CACHE INTERNAL "")
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE INTERNAL "")
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE INTERNAL "")

#if (CMAKE_COMPILER_IS_GNUCXX)
#   add_definitions (-Wall -pedantic)
#endif ()

IF(CMAKE_COMPILER_IS_GNUCC)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCC)
IF(CMAKE_COMPILER_IS_GNUCXX)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fmessage-length=0")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

MACRO(TARGET_FINALLY TARGET_ELF)
   add_dependencies(${CMAKE_PROJECT_NAME}.elf ${DEPENDENCIES})

   TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}.elf ${LIBRARIES})
   
   ADD_CUSTOM_TARGET(${CMAKE_PROJECT_NAME}.hex DEPENDS ${CMAKE_PROJECT_NAME}.elf COMMAND ${CMAKE_OBJCOPY} -Oihex ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.hex)
   ADD_CUSTOM_TARGET(${CMAKE_PROJECT_NAME}.bin DEPENDS ${CMAKE_PROJECT_NAME}.elf COMMAND ${CMAKE_OBJCOPY} -Obinary ${CMAKE_PROJECT_NAME}.elf ${CMAKE_PROJECT_NAME}.bin)
   
   ADD_CUSTOM_COMMAND(
    TARGET ${CMAKE_PROJECT_NAME}.elf
    POST_BUILD
    COMMAND arm-none-eabi-objdump ARGS -dDsS ${CMAKE_PROJECT_NAME}.elf > ${CMAKE_PROJECT_NAME}.dis
   )
ENDMACRO(TARGET_FINALLY)

MACRO(INCLUDE_SUBDIR SUBDIR)
    INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/${SUBDIR}/)
    INCLUDE(${CMAKE_CURRENT_LIST_DIR}/${SUBDIR}/subdir.cmake)
ENDMACRO(INCLUDE_SUBDIR)

MACRO(ADD_DEFINE DEFINE)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D${DEFINE}")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D${DEFINE}")
ENDMACRO(ADD_DEFINE)
